extends articlebase

block project
  p
    | If you’ve spent any time deploying applications, you’ve probably heard of 
    | Ansible. And if you’re like me, you probably took a look at a (non-trivial)
    | Ansible playbook, saw a lot of moving parts, thought to yourself "meh, 
    | deploying through ssh is good enough", and went on with your business. 
    | Hate to break it to you bro, but you were wrong. The "git pull, service 
    | restart" approach sucks. It’s time for you to learn Ansible.

  p
    | At it’s core, Ansible is really just automating the tasks you normally do
    | through ssh. In a deployment context, it pulls a repository, runs any 
    | necessary build scripts, and restarts a service. Instead of issuing a 
    | bunch of commands, it can operate across your entire server inventory 
    | in one shot. Sure, you can use shell scripts to accomplish the same thing,
    | but Ansible provides a known structure for what would otherwise be ad hoc 
    | scripts.
    
  p
    | There are a lot of pieces to Ansible. I’ll give you that. But those pieces
    | are sensible.  So sensible, in fact, that I can give you a rundown right 
    | here, right now. And in order to help you understand, I’ll break it down 
    | in football terms.

  h3 Plays
  p
    | So Ansible operates on a playbook concept, consisting of a series of plays.
    | Each play handles one devops job. That job can be as simple as restart nginx,
    | or as complex as provisioning a new server farm and deploying an app.

  p
    | If you’ve watched any Monday Night Football, you’ve almost certainly heard
    | Jon Gruden mention "Spider 2 Y Banana". Just as "Spider 2 Y Banana" is a 
    | play in Coach Gruden’s playbook, provisioning a server or restart a service
    | are plays in your devops playbook.

  h3 Roles
  p
    | In Ansible, a play has a bunch of subordinate tasks, each performing a 
    | discrete function. If we run a play to deploy an app, we have to pull the
    | repository, then stop and restart a service. Each of these steps represent 
    | a task.

  p
    | Similarly, "Spider 2 Y banana" has a series of inherent tasks, with each 
    | player responsible for something distinct. The X receiver runs a deep route,
    | Y runs a banana, Z runs a shallow cross, and the fullback runs to the flat.

  h3 Inventories
  p
    | Ansible allows a play to be run on a subset of your server inventory using
    | the --inventory flag. This allows you to isolate a play to one particular 
    | group.

  p
    | (Be forewarned, this is a weak analogy. Sorry fam.)

  p
    | "Spider 2 Y banana" isn't necessarily limited to one particular formation. 
    | This route concept can translate to other formations too. It's the routes
    | that define the play, not the players themselves. This particular play can
    | be run in a subset of all possible formations.

  h3 Tags
  p
    | Sometimes you don’t want to run a play as it’s drawn up. You may need to make
    | adjustments. You may need to- dare I say- call an audible. Ansible supports
    | this through tags. Specifying a tag lets you call bits and pieces of the play.

  p
    | As the quarterback approaches the line of scrimmage, he may see a favorable 
    | matchup and deviate from the called play in an attempt to exploit it. Maybe
    | "Spider 2 Y banana" isn’t ideal given the defense, and we only want to run 
    | part of it. Audible out, bro.

  h3 Handlers
  p
    | Since some devops tasks are inherently long-running, you may want something
    | to happen upon completion. Ansible calls these handlers. These are normal
    | tasks known by some kind of unique identifier.

  p
    | Football has this too. Say it’s the two minute drill. You’re out of timeouts.
    | You just got a big first down and need more time to set something up. You 
    | need to stop the clock. As the team is hustling down the field to get on
    | the ball, the quarterback is shouting to everyone that he intends to clock 
    | it. The team gets set, snaps, and the quarterback spikes the ball, stopping
    | the game clock. The quarterback effectively ran a handler.

  p
    | This was never meant to be a deep dive into Ansible’s functionality. I mean,
    | seriously, I used "Spider 2 Y Banana" as an analogy. Hopefully though, this
    | wave top view makes you a little more comfortable with Ansible’s concepts
    | and terminology. The ansible playbook I used to deploy this site can be
    | seen on #[+link('https://github.com/dkrichards86/dkrichards-ansible', 'my GitHub')(title="Ansible playbook for dkrichards.com" target="_blank")]