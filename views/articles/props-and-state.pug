extends articlebase

block project
  p
    | React has two primary sources of data, #[span.code props] and #[span.code state].
    | Superficially, these attributes are very similar. Both #[span.code props] and
    | #[span.code state] are JavaScript objects, both are treated as immutable, and 
    | both will trigger a rerender. However, they serve different purposes.

  h3 props

  p
    | #[span.code props] short for properties, are, as the name suggests, a component's
    | properties. These are set upstream and passed down to a component. They
    | should be considered immutable, as changing them in a downstream component
    | won't propagate back upstream. They can be thought of as configuration or
    | options associated with a component.

  p
    | Since props are used to modify a component, they often require validation
    | to ensure proper behavior. React looks for helper attributes to determine
    | the shape of props. These attributes are #[span.code propTypes] and #[span.code defaultProps].

  h4 propTypes
  
  p
    | #[span.code propTypes] describe the shape of the #[span.code props] object.

  h4 defaultProps
  
  p
    | #[span.code defaultProps] supply the component with default property values, should a
    | property be missing in the component declaration.
  
  h3 state
  
  p
    | #[span.code state] is a component specific data store. Since state is inextricably
    | tied to the component lifecycle, it is important to treat it as an immutable
    | structure. Making changes to #[span.code state] directly won't kick off the 
    | reconciliation process, and when a component finally does reconcile, your
    | update will disappear.
  
  p
    | In order to make changes to your state data, React implements the 
    | #[span.code setState()] method. #[span.code setState] accepts an object as its first argument,
    | and an optional callback  (more on that in a minute). The object argument 
    | is shallowly merged into state, and reconciliation is initiated.
  
  p
    | Since #[span.code setState] triggers a reconciliation and subsequent rerender, React
    | internally batches these updates. Updating a state key repeatedly while
    | enqueued presents an opportunity to lose data. Fortunately for us, React 
    | gives us a #[span.code setState] callback. The callback is trigged when the state 
    | cache is updated, ensuring data integrity. So thanks for that, React.
  
  p
    | As I mentioned earlier, state is in the component scope. That is, it’s 
    | parents and siblings are blissfully unaware. It must be explicitly shared
    | with other components, typically via callback #[span.code props]. If you intend to 
    | share state with a few components, such as in a form, it’s advisable to 
    | maintain that state at the first common ancestor and pass it down as a prop.
  
  p
    | If you have state that needs to be shared across a multitude of components,
    | you’re better off using a library designed for state storage, like #[span.code redux]
    | or #[span.code mobx].

  p.footnote
    | Note: I originally posted this as a Gist on GitHub, but I'm reposting here
    | for added visibility.